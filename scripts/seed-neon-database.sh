#!/bin/bash

# Complete Database Seeding Script for Neon Database
# Seeds admin user and sample resources for Release Management System

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
ADMIN_USERNAME="admin"
ADMIN_PASSWORD="Release2024!"
ADMIN_EMAIL="admin@example.com"
# BCrypt hash for "Release2024!" (strength 10)
# Generated by Spring Boot BCryptPasswordEncoder
ADMIN_PASSWORD_HASH='$2a$10$7iBO3awrlKKLn4.geHF4mu3gyIMLEszxaeqCNy7Vu5y5Ado33xHkC'

echo -e "${CYAN}"
cat << "EOF"
╔══════════════════════════════════════════════════════════╗
║     Release Management System - Database Seeding         ║
║              Neon PostgreSQL Database                    ║
╚══════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Get Neon connection string
echo -e "${YELLOW}Step 1: Database Connection${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

if [ -z "$NEON_DATABASE_URL" ]; then
    echo "Please enter your Neon database connection string:"
    echo -e "${CYAN}Format: postgresql://user:password@ep-xxxxx.region.aws.neon.tech/neondb?sslmode=require${NC}"
    read -r NEON_DATABASE_URL
fi

# Test connection
echo -e "\n${YELLOW}Testing connection...${NC}"
if psql "$NEON_DATABASE_URL" -c "SELECT 1;" > /dev/null 2>&1; then
    echo -e "${GREEN}✓ Connection successful${NC}"
else
    echo -e "${RED}✗ Connection failed${NC}"
    echo "Please check your connection string and try again."
    exit 1
fi

# Check if tables exist
echo -e "\n${YELLOW}Step 2: Verify Database Schema${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

TABLE_COUNT=$(psql "$NEON_DATABASE_URL" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';")

if [ "$TABLE_COUNT" -lt 5 ]; then
    echo -e "${RED}✗ Database schema not initialized${NC}"
    echo ""
    echo "The database doesn't have the required tables."
    echo "Please deploy your backend to Render first, so Flyway can create the schema."
    echo ""
    echo "Expected tables: users, resources, releases, allocations, etc."
    echo "Current table count: $TABLE_COUNT"
    exit 1
fi

echo -e "${GREEN}✓ Database schema exists ($TABLE_COUNT tables found)${NC}"

# Check if data already exists
USER_COUNT=$(psql "$NEON_DATABASE_URL" -t -c "SELECT COUNT(*) FROM users;")
RESOURCE_COUNT=$(psql "$NEON_DATABASE_URL" -t -c "SELECT COUNT(*) FROM resources;")

echo ""
echo "Current data:"
echo "  - Users: $USER_COUNT"
echo "  - Resources: $RESOURCE_COUNT"

if [ "$USER_COUNT" -gt 0 ] || [ "$RESOURCE_COUNT" -gt 0 ]; then
    echo ""
    echo -e "${YELLOW}⚠️  Database already contains data.${NC}"
    echo ""
    read -p "Do you want to clear existing data and reseed? (yes/no): " CLEAR_DATA
    
    if [ "$CLEAR_DATA" = "yes" ]; then
        echo -e "\n${YELLOW}Clearing existing data...${NC}"
        
        psql "$NEON_DATABASE_URL" << EOF
-- Disable foreign key checks temporarily
SET session_replication_role = 'replica';

-- Clear data
TRUNCATE TABLE allocations CASCADE;
TRUNCATE TABLE notifications CASCADE;
TRUNCATE TABLE transaction_logs CASCADE;
TRUNCATE TABLE effort_estimates CASCADE;
TRUNCATE TABLE components CASCADE;
TRUNCATE TABLE scope_items CASCADE;
TRUNCATE TABLE blockers CASCADE;
TRUNCATE TABLE phases CASCADE;
TRUNCATE TABLE releases CASCADE;
TRUNCATE TABLE resources CASCADE;
TRUNCATE TABLE users CASCADE;

-- Re-enable foreign key checks
SET session_replication_role = 'origin';
EOF
        
        echo -e "${GREEN}✓ Existing data cleared${NC}"
    else
        echo -e "\n${YELLOW}Skipping data clear. Will attempt to add new data.${NC}"
    fi
fi

# Seed admin user
echo -e "\n${YELLOW}Step 3: Creating Admin User${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

psql "$NEON_DATABASE_URL" << EOF
-- Create admin user if not exists
INSERT INTO users (username, password, email, created_at, updated_at)
SELECT 
    '${ADMIN_USERNAME}',
    '${ADMIN_PASSWORD_HASH}',
    '${ADMIN_EMAIL}',
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
WHERE NOT EXISTS (
    SELECT 1 FROM users WHERE username = '${ADMIN_USERNAME}'
);
EOF

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✓ Admin user created/verified${NC}"
    echo ""
    echo "  Username: ${ADMIN_USERNAME}"
    echo "  Password: ${ADMIN_PASSWORD}"
    echo "  Email: ${ADMIN_EMAIL}"
else
    echo -e "${RED}✗ Failed to create admin user${NC}"
    exit 1
fi

# Seed resources
echo -e "\n${YELLOW}Step 4: Creating Sample Resources${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

psql "$NEON_DATABASE_URL" << 'EOF'
-- Seed sample resources
INSERT INTO resources (name, employee_number, email, status, project_start_date, project_end_date, employee_grade, skill_function, skill_sub_function, created_at, updated_at)
VALUES
-- Functional Design Team
('John Smith', '10000001', 'john.smith@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_5', 'FUNCTIONAL_DESIGN', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('James Thomas', '10000009', 'james.thomas@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_6', 'FUNCTIONAL_DESIGN', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Jessica Clark', '10000014', 'jessica.clark@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_7', 'FUNCTIONAL_DESIGN', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Andrew Allen', '10000019', 'andrew.allen@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_5', 'FUNCTIONAL_DESIGN', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Lauren Green', '10000024', 'lauren.green@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_6', 'FUNCTIONAL_DESIGN', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Tyler Mitchell', '10000029', 'tyler.mitchell@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_7', 'FUNCTIONAL_DESIGN', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- Technical Design Team
('Sarah Johnson', '10000002', 'sarah.johnson@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_6', 'TECHNICAL_DESIGN', 'FORGEROCK_IDM', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Jennifer Martinez', '10000006', 'jennifer.martinez@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_6', 'TECHNICAL_DESIGN', 'FORGEROCK_IG', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Maria Garcia', '10000010', 'maria.garcia@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_7', 'TECHNICAL_DESIGN', 'FORGEROCK_UI', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Daniel Rodriguez', '10000015', 'daniel.rodriguez@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_5', 'TECHNICAL_DESIGN', 'SAILPOINT', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Stephanie Young', '10000020', 'stephanie.young@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_6', 'TECHNICAL_DESIGN', 'FORGEROCK_IG', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Brandon Adams', '10000025', 'brandon.adams@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_7', 'TECHNICAL_DESIGN', 'SAILPOINT', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Kimberly Perez', '10000030', 'kimberly.perez@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_5', 'TECHNICAL_DESIGN', 'FORGEROCK_IDM', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- Build Team
('Michael Chen', '10000003', 'michael.chen@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_7', 'BUILD', 'TALEND', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Robert Taylor', '10000007', 'robert.taylor@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_7', 'BUILD', 'SAILPOINT', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Christopher Lee', '10000011', 'christopher.lee@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_8', 'BUILD', 'TALEND', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Ashley Lewis', '10000016', 'ashley.lewis@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_8', 'BUILD', 'FORGEROCK_IDM', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Kevin King', '10000021', 'kevin.king@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_7', 'BUILD', 'TALEND', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Rachel Baker', '10000026', 'rachel.baker@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_5', 'BUILD', 'FORGEROCK_UI', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- Test Team
('Emily Davis', '10000004', 'emily.davis@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_5', 'TEST', 'AUTOMATED', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Lisa Anderson', '10000008', 'lisa.anderson@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_5', 'TEST', 'MANUAL', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Matthew Harris', '10000013', 'matthew.harris@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_6', 'TEST', 'AUTOMATED', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Joshua Walker', '10000017', 'joshua.walker@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_6', 'TEST', 'MANUAL', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Nicole Wright', '10000022', 'nicole.wright@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_8', 'TEST', 'AUTOMATED', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Justin Nelson', '10000027', 'justin.nelson@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_8', 'TEST', 'MANUAL', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- Platform Team
('David Wilson', '10000005', 'david.wilson@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_8', 'PLATFORM', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Amanda White', '10000012', 'amanda.white@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_5', 'PLATFORM', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Melissa Hall', '10000018', 'melissa.hall@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_7', 'PLATFORM', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Ryan Scott', '10000023', 'ryan.scott@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_5', 'PLATFORM', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Megan Carter', '10000028', 'megan.carter@example.com', 'ACTIVE', '2025-01-01', '2025-12-31', 'LEVEL_6', 'PLATFORM', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
ON CONFLICT (employee_number) DO NOTHING;
EOF

if [ $? -eq 0 ]; then
    # Count resources created
    NEW_RESOURCE_COUNT=$(psql "$NEON_DATABASE_URL" -t -c "SELECT COUNT(*) FROM resources;")
    echo -e "${GREEN}✓ Resources seeded successfully${NC}"
    echo "  Total resources in database: $NEW_RESOURCE_COUNT"
else
    echo -e "${RED}✗ Failed to seed resources${NC}"
    exit 1
fi

# Summary
echo -e "\n${CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "${CYAN}║              Seeding Complete! ✨                        ║${NC}"
echo -e "${CYAN}╚══════════════════════════════════════════════════════════╝${NC}"

echo -e "\n${GREEN}Database Summary:${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Get final counts
FINAL_USER_COUNT=$(psql "$NEON_DATABASE_URL" -t -c "SELECT COUNT(*) FROM users;")
FINAL_RESOURCE_COUNT=$(psql "$NEON_DATABASE_URL" -t -c "SELECT COUNT(*) FROM resources;")

echo "  Users: $FINAL_USER_COUNT"
echo "  Resources: $FINAL_RESOURCE_COUNT"

echo ""
echo -e "${GREEN}Login Credentials:${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  Username: ${ADMIN_USERNAME}"
echo "  Password: ${ADMIN_PASSWORD}"
echo ""

echo -e "${YELLOW}Next Steps:${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "1. Verify Render backend is deployed and healthy"
echo "2. Open your frontend application"
echo "3. Log in with the credentials above"
echo "4. Start creating releases and allocations!"
echo ""

echo -e "${CYAN}✨ Your Release Management System is ready to use! ✨${NC}"
echo ""

